log             log.relaxFluid

# Insertion of Indenter & Fluid and Equilibration of Fluid


# Inserting the Indenter


variable        tmp equal 
variable        zWstart equal  #200

units           metal
dimension       3
boundary        p p sm
molecule        33 ./Solid.molecule ./Solid.molecule
atom_style	template 33
special_bonds   extra 1

# setting geometry
variable        dz equal ./Solid.molecule  # 25.5
variable        Radius equal ./Solid.molecule # 20
variable        xxlo equal ??
variable        xxhi equal ??
variable        yylo equal ??
variable        yyhi equal ??
variable        zzlo equal ??
variable        zzhi equal ??
variable        dzz equal "(v_zzhi + v_dz)"

# Sphere
variable        xSphere equal "(v_xxhi + v_xxlo)/2"
variable        ySphere equal "(v_yyhi + v_yylo)/2"
region          sphere1 sphere ${xSphere} ${ySphere} ${dzz} ${Radius}     units box

# Cylinder
variable        ZyLength equal $$ # 60
variable        xZhi equal "v_xSphere + 0.5*v_ZyLength"
variable        xZlo equal "v_xSphere - 0.5*v_ZyLength"
variable        yZy equal "50+0.5*v_Radius"
#region          sphere1 cylinder x ${yZy} ${dzz} ${Radius} ${xZlo} ${xZhi}   units box


read_data	./data.relaxSubstrate_${tmp}K extra/atom/types 3

change_box	all z final ${zzlo} ${zWstart}   units box

lattice         none 1.0
lattice         diamond ./Solid.molecule #3.5667

create_atoms    3 region $$sphere1 mol 33 47

mass            1 ./Solid.molecule
mass            2 ./Solid.molecule
mass            3 ./Solid.molecule
mass            4 ./Solid.molecule

write_data      data.insSphereInterim

shell           ./Skript_postinsSphereInterim.sh

clear


# Insertion of Fluid and its equilibration

variable        tmp      equal 
variable        zWstart  equal  200
variable        densEnd  equal  0.07 #in g/cm^3


units           metal
dimension	3
boundary        p p sm
molecule        33 ./Ethan.molecule  ./Solid.molecule  ./Solid.molecule
atom_style	template 33
special_bonds   extra 1


variable        dz equal ./Solid.molecule
variable        Radius equal ./Solid.molecule
variable        xxlo equal ??
variable        xxhi equal ??
variable        yylo equal ??
variable        yyhi equal ??
variable        zzlo equal ??
variable        zzhi equal ??
variable        xxhiInnen equal ${xxhi}-3
variable        yyhiInnen equal ${yyhi}-3
variable        xxhiIInnen equal ${xxhi}-8
variable        yyhiIInnen equal ${yyhi}-8
variable        zzFluid equal ${zzhi}+4
variable        zzendFluid equal ${zWstart}-2.5
variable        xxloFluid equal ${xxlo}+2.5
variable        xxhiFluid equal ${xxhi}-2.5
variable        yyloFluid equal ${yylo}+2.5
variable        yyhiFluid equal ${yyhi}-2.5
variable        dzz equal "(v_zzhi + v_dz)"
variable        Schutz_Radius equal "(v_Radius + 4)"

# Sphere
variable        VolFluid equal "(v_xxhi - v_xxlo) * (v_yyhi - v_yylo) * (v_zzend-$$1.8 - v_zzhi - $$sigma ) - 4/3 * PI * (v_Radius-$$sigma)^3"
variable        VolFluid equal "(v_xxhi - v_xxlo) * (v_yyhi - v_yylo) * ((v_zzend-$$1.8) - (v_zzhi)+$$sigma) - (62.5+2*$$Sigma) * PI * (v_Radius+$$Sigma)^2"
variable        xSphere equal "(v_xxhi + v_xxlo)/2"
variable       	ySphere	equal "(v_yyhi + v_yylo)/2"
region          SchutzSphere sphere ${xSphere} ${ySphere} ${dzz} ${Schutz_Radius}     units box
region          sphere1 sphere ${xSphere} ${ySphere} ${dzz} ${Radius}     units box


# Cylinder
variable        ZyLength equal $$ # 60
variable        VolFluid equal "(v_xxhi - v_xxlo) * (v_yyhi - v_yylo) * ((v_zzend-$$1.8) - (v_zzhi)+$$sigma) - (62.5+2*$$Sigma) * PI * (v_Radius+$$Sigma)^2"
variable        xZhi equal "v_xSphere + 0.5*v_ZyLength"
variable        xZlo equal "v_xSphere - 0.5*v_ZyLength"
variable        yZy equal "50 + 0.5*v_Radius"
#region          sphere1 cylinder x ${yZy} ${dzz} ${Radius} ${xZlo} ${xZhi}   units box
#region          SchutzSphere cylinder x ${yZy} ${dzz} ${Schutz_Radius} ${xZlo} ${xZhi}   units box


read_data	./data.insSphereInterim $$$ extra/atom/types 1 extra/bond/types 1

mass            1 ./Solid.molecule
mass            2 ./Solid.molecule
mass            3 ./Solid.molecule
mass            4 ./Solid.molecule
mass            5 ./Solid.molecule #15.03


# Fixed boundaries

region          bottom block ${xxlo} ${xxhi} ${yylo} ${yyhi} ${zzlo} 3.0            units box
region          sidex1 block ${xxlo} ${xxhi} ${yylo} 3.0 3.0 ${zzhi}               units box
region          sidey1 block ${xxhiInnen} ${xxhi} 3.0 ${yyhiInnen} 3.0 ${zzhi}              units box
region          sidex2 block ${xxlo} ${xxhi} ${yyhiInnen} ${yyhi} 3.0 ${zzhi}        units box
region          sidey2 block ${xxlo} 3.0 3.0 ${yyhiInnen} 3.0 ${zzhi}                units box


# Thermostat layers

region          bottom2 block 3.0 ${xxhiInnen} 3.0 ${yyhiInnen} 3.0 8.0                units box
region          sidex11 block 3.0 ${xxhiInnen} 3.0 8.0 8.0 ${zzhi}                  units box
region          sidey11 block ${xxhiIInnen} ${xxhiInnen} 8.0 ${yyhiInnen} 8.0 ${zzhi}        units box
region          sidex22 block 3.0 ${xxhiIInnen} ${yyhiIInnen} ${yyhiInnen} 8.0 ${zzhi}        units box
region          sidey22 block 3.0 8.0 8.0 ${yyhiIInnen} 8.0 ${zzhi}                  units box

region          body block 8.0 ${xxhiIInnen} 8.0 ${yyhiIInnen} 8.0 ${zzhi}                units box


# Fluid-protectlayer against unfacorable lattice

region          F_top block ${xxlo} ${xxhi} ${yylo} ${yyhi} ${zzendFluid} ${zWstart}            units box
region          F_sidex1 block ${xxlo} ${xxhi} ${yylo} ${yyloFluid} ${zzFluid} ${zzendFluid}               units box
region          F_sidey1 block ${xxhiFluid} ${xxhi} ${yyloFluid} ${yyhiFluid} ${zzFluid} ${zzendFluid}              units box
region          F_sidex2 block ${xxlo} ${xxhi} ${yyhiFluid} ${yyhi} ${zzFluid} ${zzendFluid}        units box
region          F_sidey2 block ${xxlo} ${xxloFluid} ${yyloFluid}  ${yyhiFluid} ${zzFluid} ${zzendFluid}                units box

region          F_all union 5 F_top F_sidex1 F_sidey1 F_sidex2 F_sidey2   units box


# insert Fluid

lattice         sc ./Solid.molecule #8

region          UNTEN block ${xxlo} ${xxhi} ${yylo} ${yyhi} ${zzlo} ${zzFluid} units box
region          Fluid union 3 F_all UNTEN SchutzSphere side out             units box

create_atoms    4 region Fluid mol 33 47


group           bottom region bottom
group           sidex1 region sidex1
group           sidey1 region sidey1
group           sidex2 region sidex2
group           sidey2 region sidey2

group           bottom2 region bottom2
group           sidex11 region sidex11
group           sidey11 region sidey11
group           sidex22 region sidex22
group           sidey22 region sidey22

group           fixedlayer union bottom sidex1 sidey1 sidex2 sidey2
group           boundary union bottom2 sidex11 sidey11 sidex22 sidey22
group           body region body
group           target union fixedlayer boundary body
group           sphere1 region sphere1
group           Fluid type 5

region          dumpBox block ?? 100 250 100 250 150 300	   units box
group           Koor dynamic all region dumpBox

set             group fixedlayer type 1
set             group boundary type 2
set             group body type 3
set             group sphere1 type 4

group           mobile subtract all fixedlayer boundary


pair_style      hybrid eam/fs lj/cut $$ tersoff #10
pair_coeff      * * eam/fs ../Fe_mm.eam.fs Fe Fe Fe NULL NULL
pair_coeff      * * tersoff ../SiC.tersoff NULL NULL NULL C NULL
pair_coeff      5 5 lj/cut $$$ # 0.008976 3.775 
pair_coeff      1*3 4 lj/cut $$ # 0.02495 3.7 4.2
pair_coeff	1*3 5 lj/cut $$ # 0.02495 3.7 4.2
pair_coeff	4 5 lj/cut $$ # 0.02495 3.7 4.2
#pair_modify     pair lj/cut 2 shift yes

$$$
bond_style	harmonic
bond_coeff      1 13.75563 1.507

#pair_modify     mix arithmetic
#pair_modify     tail yes


compute		boundaryTEMP boundary temp

fix             1 Fluid nve
fix             2 fixedlayer setforce 0.0 0.0 0.0
fix             3 sphere1 setforce 0.0 0.0 0.0
fix             4 boundary temp/rescale 100 v_tmp 1 0.01 1.0
fix_modify      4 temp boundaryTEMP
fix             5 sphere1 rigid single
fix             6 Fluid temp/rescale 50 v_tmp 1 1 0.8


# run indentation

compute         ke all ke/atom
compute         pe all pe/atom
variable        etotal atom (c_ke+c_pe)
#compute         stress all stress/atom
compute         cna all cna/atom 3.45
#compute         centro all centro/atom bcc

#compute         forceZ body property/atom fz
#compute         Fz body reduce sum c_forceZ
#compute         forceX body property/atom fx
#compute         Fx body reduce sum c_forceX
#compute         forceY body property/atom fy
#compute         Fy body reduce sum c_forceY

variable         MassFluid equal "mass(Fluid)"
#variable         DensFluid equal "v_MassFluid / v_VolFluid"
compute          TempFluid Fluid temp

#compute         peratom all stress/atom NULL

# spatial evaluation
variable       binwidth equal "./Solid.molecule"  # 8
variable       xstart equal "((xhi + xlo)/2)-0.5*v_binwidth"
variable       xboundHi2 equal "0.6*v_binwidth+v_xstart"
variable       xboundLo2 equal "-0.6*v_binwidth+v_xstart"
compute        Kaesten2 all chunk/atom bin/3d x ${xstart} ${binwidth} y lower ./Solid.molecule z lower ./Solid.molecule bound x ${xboundLo2} ${xboundHi2} discard yes   units box   # 3
fix            7 all ave/chunk 1 ./Solid.molecule ./Solid.molecule Kaesten2 temp density/mass file profile.relaxFluid3D_${tmp}      # 500  10000


velocity        Fluid create ${tmp} 47
neighbor        5 bin
neigh_modify    delay 5 one 50000 page 500000


timestep        ./Fe_mm.eam.fs Fe # 0.00012
variable        speedW         equal 0.5
variable        VolFluidEnd    equal "v_MassFluid / v_densEnd*1.66053904"
variable        zWend          equal "v_zzhi + ( v_VolFluidEnd + 4/3*PI*v_Radius^3 ) / ( (v_xxhi-v_xxlo)*(v_yyhi -v_yylo) ) "
variable        nCompr         equal "round((v_zWstart - v_zWend)/(v_speedW*dt))"
variable        nPost          equal ./Fe_mm.eam.fs Fe #200000
variable        nPre           equal "0.025*v_nPost"
variable        zW             equal "v_zWstart - v_speedW*(step-v_nPre)*dt"

print  	       	"WallpositionEnd ${zWend}"
variable        FunkTest equal "v_zzhi + v_dz + v_Radius+15"
if "${zWend} <= ${FunkTest}" then quit

thermo          ./Fe_mm.eam.fs Fe #100
dump            1 Koor custom $$ dump.relaxFluid type id xs ys zs  #30000
dump            2 Koor xyz 1000 relaxFluid.xyz  #500 - 1000
dump_modify     2 element Fe Fe Fe C O


# Pre Compression
variable        VolFluid_1       equal "(v_xxhi - v_xxlo) * (v_yyhi - v_yylo) * (v_zWstart - v_zzhi) - 4/3 * PI * v_Radius^3"
variable        DensFluid_1      equal "1.66053904*v_MassFluid / v_VolFluid_1"
thermo_style    custom step atoms vol press c_TempFluid v_VolFluid_1 v_MassFluid v_DensFluid_1 v_zWstart
fix             Wand all wall/harmonic zhi v_zWstart 1.0 0.0 5.0  units box
print           "Number of timesteps Pre  = ${nPre}" screen yes
print           "Number of timesteps Compr= ${nCompr}" screen yes
print           "Number of timesteps Post = ${nPost}" screen yes
run             ${nPre}
unfix           Wand


# Compression
variable        VolFluid_2       equal "(v_xxhi - v_xxlo) * (v_yyhi - v_yylo) * (v_zW - v_zzhi) - 4/3 * PI * v_Radius^3"
variable        DensFluid_2      equal "1.66053904*v_MassFluid / v_VolFluid_2"
thermo_style    custom step atoms vol press c_TempFluid v_VolFluid_2 v_MassFluid v_DensFluid_2 v_zW
fix             Wand all wall/harmonic zhi v_zW 1.0 0.0 5.0  units box
print           "Number of timesteps = ${nCompr}" screen yes
run             ${nCompr}
unfix           Wand


# Post Compression
variable        VolFluid_3       equal "(v_xxhi - v_xxlo) * (v_yyhi - v_yylo) * (v_zWend - v_zzhi) - 4/3 * PI * v_Radius^3"
variable        DensFluid_3      equal "1.66053904*v_MassFluid / v_VolFluid_3"
thermo_style    custom step atoms vol press c_TempFluid v_VolFluid_3 v_MassFluid v_DensFluid_3 v_zWend
fix             Wand3 all wall/harmonic zhi v_zWend 1.0 0.0 5.0  units box
run             ${nPost}
unfix           Wand3


write_data      data.relaxFluid_${tmp}K
undump          1
undump          2

shell           rm ./data.insSphereInterim ./log.lammps
shell           ./Skript_postRelaxFluid.sh
